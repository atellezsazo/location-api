/* eslint-env mocha */

// tests for locationCreate
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');

const { expect } = mochaPlugin.chai;
const { requestData } = require('../_helpers/data.helper');

const wrapped = mochaPlugin.getWrapper('locationCreate',
  '/src/API/endpoints/create.js', 'submit');

describe('Acceptance Test: createLocation not empty response', () => {
  before((done) => {
    done();
  });

  it('HAPPY: Not empty response', () => wrapped.run({
    body: requestData.valid,
  }).then((response) => {
    expect(response).to.not.be.empty;
  }));

  it('HAPPY: Valid request', () => wrapped.run({
    body: requestData.valid,
  }).then((response) => {
    const body = JSON.parse(response.body);
    expect(body).to.have.all.keys('id', 'longitude', 'latitude', 'officeDistance');
  }));

  it('HAPPY: Valid request, extra optional data', () => wrapped.run({
    body: requestData.fullData,
  }).then((response) => {
    const body = JSON.parse(response.body);
    expect(body).to.have.all.keys(
      'id',
      'longitude',
      'latitude',
      'name',
      'officeDistance',
      'category',
      'description',
    );
  }));

  it('SAD: Request with extra values', () => wrapped.run({
    body: requestData.extraData,
  }).then((response) => {
    const body = JSON.parse(response.body);
    expect(body).to.have.all.keys(
      'id',
      'longitude',
      'latitude',
      'name',
      'officeDistance',
    );

    expect(body).to.not.have.all.keys('noValidAttribute');
  }));

  it('BAD: Invalid request (Bad coordinates)', () => wrapped.run({
    body: requestData.invalid,
  }).then((response) => {
    const body = JSON.parse(response.body);
    expect(response).to.not.be.empty;
    expect(body).to.include(
      {
        error: 'Invalid request',
      },
    );
  }));
});
